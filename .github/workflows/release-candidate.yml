name: Release Candidate

on:
  workflow_dispatch:

jobs:
  publish-binaries:
    name: Publish binaries
    runs-on: ${{ matrix.build.OS }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - NAME: linux-x64-glibc
            OS: ubuntu-20.04
            TOOLCHAIN: stable
            TARGET: x86_64-unknown-linux-gnu
            # EXE: libtypeshift.so

          - NAME: linux-arm64-glibc
            OS: ubuntu-20.04
            TOOLCHAIN: stable
            TARGET: aarch64-unknown-linux-gnu

          # - NAME: win32-x64-msvc
          #   OS: windows-2022
          #   TOOLCHAIN: stable
          #   TARGET: x86_64-pc-windows-msvc

          # - NAME: win32-arm64-msvc
          #   OS: windows-2022
          #   TOOLCHAIN: stable
          #   TARGET: aarch64-pc-windows-msvc

          # - NAME: darwin-x64
          #   OS: macos-11
          #   TOOLCHAIN: stable
          #   TARGET: x86_64-apple-darwin

          # - NAME: darwin-arm64
          #   OS: macos-11
          #   TOOLCHAIN: stable
          #   TARGET: aarch64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.build.NAME }}" = *"-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              --allow-unauthenticated musl-tools
          fi

      - id: cache-rustup
        name: Cache Rust toolchain
        uses: actions/cache@v3
        with:
          path: ~/.rustup
          key: toolchain-${{ matrix.build.TARGET }}

      - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
        name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}
          override: true

      - name: Build (linux/macos)
        if: matrix.build.OS != 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --message-format=json-render-diagnostics --target ${{ matrix.build.TARGET }}
