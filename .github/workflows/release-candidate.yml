name: Release Candidate

on:
  workflow_dispatch:

jobs:
  persist-binaries:
    name: Persist ${{ matrix.build.os }} Binary
    runs-on: ${{ matrix.build.os }}
    defaults:
      run:  
        shell: bash
        working-directory: "${{ github.workspace }}/native"
    strategy:
      fail-fast: false
      matrix:
        build:
          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: ubi
            name: ubi-Linux-x86_64-musl.tar.gz

          - os_name: Linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            bin: ubi
            name: ubi-Linux-aarch64-musl.tar.gz

          - os_name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            bin: ubi.exe
            name: ubi-Windows-aarch64.zip

          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: ubi.exe
            name: ubi-Windows-x86_64.zip

          - os_name: macOS-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            bin: ubi
            name: ubi-Darwin-x86_64.tar.gz

          - os_name: macOS-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            bin: ubi
            name: ubi-Darwin-aarch64.tar.gz
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.build.os, 'ubuntu') && !matrix.build.cross
      
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          target: ${{ matrix.build.target }}
          args: "--release --manifest-path ${{ github.workspace }}/native/Cargo.toml --message-format=json-render-diagnostics"
          strip: true
      # - id: cache-rustup
      #   name: Cache Rust toolchain
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.rustup
      #     key: toolchain-${{ matrix.build.TARGET }}-${{ matrix.build.TOOLCHAIN }}

      # - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
      #   name: Install Rust toolchain
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     profile: minimal
      #     toolchain: ${{ matrix.build.TOOLCHAIN }}
      #     override: true

      # - name: Build
      #   uses: actions-rs/cargo@v1
      #   with:
      #     use-cross: true
      #     command: build
      #     args: --release --manifest-path ${{ github.workspace }}/native/Cargo.toml --message-format=json-render-diagnostics --target ${{ matrix.build.TARGET }}
