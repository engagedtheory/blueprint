use std::fmt::Debug;
use swc_ecma_ast::*;


// #[derive(Debug)]
pub enum NodeKind<'m> {
    ArrowExpr(&'m ArrowExpr),
    BlockStmt(&'m BlockStmt),
    BlockStmtOrExpr(&'m BlockStmtOrExpr),
    BreakStmt(&'m BreakStmt),
    Callee(&'m Callee),
    CallExpr(&'m CallExpr),
    Class(&'m Class),
    ClassDecl(&'m ClassDecl),
    ClassExpr(&'m ClassExpr),
    ClassMember(&'m ClassMember),
    ClassProp(&'m ClassProp),
    ContinueStmt(&'m ContinueStmt),
    DebuggerStmt(&'m DebuggerStmt),
    Decl(&'m Decl),
    DoWhileStmt(&'m DoWhileStmt),
    EmptyStmt(&'m EmptyStmt),
    ExportAll(&'m ExportAll),
    ExportDecl(&'m ExportDecl),
    ExportDefaultDecl(&'m ExportDefaultDecl),
    ExportDefaultExpr(&'m ExportDefaultExpr),
    ExportSpecifier(&'m ExportSpecifier),
    Expr(&'m Expr),
    ExprOrSpread(&'m ExprOrSpread),
    ExprStmt(&'m ExprStmt),
    FnDecl(&'m FnDecl),
    ForInStmt(&'m ForInStmt),
    ForOfStmt(&'m ForOfStmt),
    ForStmt(&'m ForStmt),
    Ident(&'m Ident),
    IfStmt(&'m IfStmt),
    ImportDecl(&'m ImportDecl),
    ImportDefaultSpecifier(&'m ImportDefaultSpecifier),
    ImportNamedSpecifier(&'m ImportNamedSpecifier),
    ImportSpecifier(&'m ImportSpecifier),
    LabeledStmt(&'m LabeledStmt),
    Module(&'m Module),
    ModuleItem(&'m ModuleItem),
    NamedExport(&'m NamedExport),
    ObjectLit(&'m ObjectLit),
    Pat(&'m Pat),
    ReturnStmt(&'m ReturnStmt),
    Source(&'m Module),
    SwitchStmt(&'m SwitchStmt),
    ThrowStmt(&'m ThrowStmt),
    TryStmt(&'m TryStmt),
    TsArrayType(&'m TsArrayType),
    TsConditionalType(&'m TsConditionalType),
    TsEnumDecl(&'m TsEnumDecl),
    TsExportAssignment(&'m TsExportAssignment),
    TsFnOrConstructorType(&'m TsFnOrConstructorType),
    TsImportEquals(&'m TsImportEqualsDecl),
    TsImportType(&'m TsImportType),
    TsIndexedAccessType(&'m TsIndexedAccessType),
    TsInferType(&'m TsInferType),
    TsInterfaceBody(&'m TsInterfaceBody),
    TsInterfaceDecl(&'m TsInterfaceDecl),
    TsKeywordType(&'m TsKeywordType),
    TsLitType(&'m TsLitType),
    TsMappedType(&'m TsMappedType),
    TsModuleDecl(&'m TsModuleDecl),
    TsNamespaceExport(&'m TsNamespaceExportDecl),
    TsOptionalType(&'m TsOptionalType),
    TsParenthesizedType(&'m TsParenthesizedType),
    TsPropertySignature(&'m TsPropertySignature),
    TsRestType(&'m TsRestType),
    TsThisType(&'m TsThisType),
    TsTupleType(&'m TsTupleType),
    TsType(&'m TsType),
    TsTypeAliasDecl(&'m TsTypeAliasDecl),
    TsTypeAnnotation(&'m TsTypeAnn),
    TsTypeElement(&'m TsTypeElement),
    TsTypeLit(&'m TsTypeLit),
    TsTypeOperator(&'m TsTypeOperator),
    TsTypeParamInstantiation(&'m TsTypeParamInstantiation),
    TsTypePredicate(&'m TsTypePredicate),
    TsTypeQuery(&'m TsTypeQuery),
    TsTypeRef(&'m TsTypeRef),
    TsUnionOrIntersectionType(&'m TsUnionOrIntersectionType),
    VarDecl(&'m VarDecl),
    VarDeclarator(&'m VarDeclarator),
    WhileStmt(&'m WhileStmt),
    WithStmt(&'m WithStmt),
}

impl<'n> Clone for NodeKind<'n> {
    fn clone(&self) -> NodeKind<'n> {
        match self {
            NodeKind::ArrowExpr(raw) => NodeKind::ArrowExpr(*raw),
            NodeKind::BlockStmt(raw) => NodeKind::BlockStmt(*raw),
            NodeKind::BlockStmtOrExpr(raw) => NodeKind::BlockStmtOrExpr(*raw),
            NodeKind::BreakStmt(raw) => NodeKind::BreakStmt(*raw),
            NodeKind::Callee(raw) => NodeKind::Callee(*raw),
            NodeKind::CallExpr(raw) => NodeKind::CallExpr(*raw),
            NodeKind::Class(raw) => NodeKind::Class(raw),
            NodeKind::ClassDecl(raw) => NodeKind::ClassDecl(*raw),
            NodeKind::ClassExpr(raw) => NodeKind::ClassExpr(*raw),
            NodeKind::ClassMember(raw) => NodeKind::ClassMember(raw),
            NodeKind::ClassProp(raw) => NodeKind::ClassProp(raw),
            NodeKind::ContinueStmt(raw) => NodeKind::ContinueStmt(*raw),
            NodeKind::DebuggerStmt(raw) => NodeKind::DebuggerStmt(*raw),
            NodeKind::Decl(raw) => NodeKind::Decl(*raw),
            NodeKind::DoWhileStmt(raw) => NodeKind::DoWhileStmt(*raw),
            NodeKind::EmptyStmt(raw) => NodeKind::EmptyStmt(*raw),
            NodeKind::ExportAll(raw) => NodeKind::ExportAll(*raw),
            NodeKind::ExportDecl(raw) => NodeKind::ExportDecl(*raw),
            NodeKind::ExportDefaultDecl(raw) => NodeKind::ExportDefaultDecl(*raw),
            NodeKind::ExportDefaultExpr(raw) => NodeKind::ExportDefaultExpr(*raw),
            NodeKind::ExportSpecifier(raw) => NodeKind::ExportSpecifier(raw),
            NodeKind::Expr(raw) => NodeKind::Expr(*raw),
            NodeKind::ExprOrSpread(raw) => NodeKind::ExprOrSpread(*raw),
            NodeKind::ExprStmt(raw) => NodeKind::ExprStmt(*raw),
            NodeKind::FnDecl(raw) => NodeKind::FnDecl(*raw),
            NodeKind::ForInStmt(raw) => NodeKind::ForInStmt(*raw),
            NodeKind::ForOfStmt(raw) => NodeKind::ForOfStmt(*raw),
            NodeKind::ForStmt(raw) => NodeKind::ForStmt(*raw),
            NodeKind::Ident(raw) => NodeKind::Ident(*raw),
            NodeKind::IfStmt(raw) => NodeKind::IfStmt(*raw),
            NodeKind::ImportDecl(raw) => NodeKind::ImportDecl(*raw),
            NodeKind::ImportDefaultSpecifier(raw) => NodeKind::ImportDefaultSpecifier(*raw),
            NodeKind::ImportNamedSpecifier(raw) => NodeKind::ImportNamedSpecifier(*raw),
            NodeKind::ImportSpecifier(raw) => NodeKind::ImportSpecifier(*raw),
            NodeKind::LabeledStmt(raw) => NodeKind::LabeledStmt(*raw),
            NodeKind::Module(raw) => NodeKind::Module(raw.clone()),
            NodeKind::ModuleItem(raw) => NodeKind::ModuleItem(*raw),
            NodeKind::NamedExport(raw) => NodeKind::NamedExport(*raw),
            NodeKind::ObjectLit(raw) => NodeKind::ObjectLit(*raw),
            NodeKind::Pat(raw) => NodeKind::Pat(*raw),
            NodeKind::ReturnStmt(raw) => NodeKind::ReturnStmt(*raw),
            NodeKind::Source(raw) => NodeKind::Source(raw.clone()),
            NodeKind::SwitchStmt(raw) => NodeKind::SwitchStmt(*raw),
            NodeKind::ThrowStmt(raw) => NodeKind::ThrowStmt(*raw),
            NodeKind::TryStmt(raw) => NodeKind::TryStmt(*raw),
            NodeKind::TsArrayType(raw) => NodeKind::TsArrayType(*raw),
            NodeKind::TsConditionalType(raw) => NodeKind::TsConditionalType(*raw),
            NodeKind::TsEnumDecl(raw) => NodeKind::TsEnumDecl(*raw),
            NodeKind::TsExportAssignment(raw) => NodeKind::TsExportAssignment(*raw),
            NodeKind::TsFnOrConstructorType(raw) => NodeKind::TsFnOrConstructorType(*raw),
            NodeKind::TsImportEquals(raw) => NodeKind::TsImportEquals(*raw),
            NodeKind::TsImportType(raw) => NodeKind::TsImportType(*raw),
            NodeKind::TsIndexedAccessType(raw) => NodeKind::TsIndexedAccessType(*raw),
            NodeKind::TsInferType(raw) => NodeKind::TsInferType(*raw),
            NodeKind::TsInterfaceBody(raw) => NodeKind::TsInterfaceBody(raw),
            NodeKind::TsInterfaceDecl(raw) => NodeKind::TsInterfaceDecl(*raw),
            NodeKind::TsKeywordType(raw) => NodeKind::TsKeywordType(*raw),
            NodeKind::TsLitType(raw) => NodeKind::TsLitType(*raw),
            NodeKind::TsMappedType(raw) => NodeKind::TsMappedType(*raw),
            NodeKind::TsModuleDecl(raw) => NodeKind::TsModuleDecl(*raw),
            NodeKind::TsNamespaceExport(raw) => NodeKind::TsNamespaceExport(*raw),
            NodeKind::TsOptionalType(raw) => NodeKind::TsOptionalType(*raw),
            NodeKind::TsParenthesizedType(raw) => NodeKind::TsParenthesizedType(*raw),
            NodeKind::TsPropertySignature(raw) => NodeKind::TsPropertySignature(*raw),
            NodeKind::TsRestType(raw) => NodeKind::TsRestType(*raw),
            NodeKind::TsThisType(raw) => NodeKind::TsThisType(*raw),
            NodeKind::TsTupleType(raw) => NodeKind::TsTupleType(*raw),
            NodeKind::TsType(raw) => NodeKind::TsType(*raw),
            NodeKind::TsTypeAliasDecl(raw) => NodeKind::TsTypeAliasDecl(*raw),
            NodeKind::TsTypeAnnotation(raw) => NodeKind::TsTypeAnnotation(*raw),
            NodeKind::TsTypeElement(raw) => NodeKind::TsTypeElement(raw),
            NodeKind::TsTypeLit(raw) => NodeKind::TsTypeLit(*raw),
            NodeKind::TsTypeOperator(raw) => NodeKind::TsTypeOperator(*raw),
            NodeKind::TsTypeParamInstantiation(raw) => NodeKind::TsTypeParamInstantiation(raw),
            NodeKind::TsTypePredicate(raw) => NodeKind::TsTypePredicate(*raw),
            NodeKind::TsTypeQuery(raw) => NodeKind::TsTypeQuery(*raw),
            NodeKind::TsTypeRef(raw) => NodeKind::TsTypeRef(*raw),
            NodeKind::TsUnionOrIntersectionType(raw) => NodeKind::TsUnionOrIntersectionType(*raw),
            NodeKind::VarDecl(raw) => NodeKind::VarDecl(*raw),
            NodeKind::VarDeclarator(raw) => NodeKind::VarDeclarator(*raw),
            NodeKind::WhileStmt(raw) => NodeKind::WhileStmt(*raw),
            NodeKind::WithStmt(raw) => NodeKind::WithStmt(*raw),
        }
    }
}


impl<'m> Debug for NodeKind<'m> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::ArrowExpr(_) => f.debug_tuple("ArrowExpr").finish(),
            Self::BlockStmt(_) => f.debug_tuple("BlockStmt").finish(),
            Self::BlockStmtOrExpr(_) => f.debug_tuple("BlockStmtOrExpr").finish(),
            Self::BreakStmt(_) => f.debug_tuple("BreakStmt").finish(),
            Self::Callee(_) => f.debug_tuple("Callee").finish(),
            Self::CallExpr(_) => f.debug_tuple("CallExpr").finish(),
            Self::Class(_) => f.debug_tuple("Class").finish(),
            Self::ClassDecl(_) => f.debug_tuple("ClassDecl").finish(),
            Self::ClassExpr(_) => f.debug_tuple("ClassExpr").finish(),
            Self::ClassMember(_) => f.debug_tuple("ClassMember").finish(),
            Self::ClassProp(_) => f.debug_tuple("ClassProp").finish(),
            Self::ContinueStmt(_) => f.debug_tuple("ContinueStmt").finish(),
            Self::DebuggerStmt(_) => f.debug_tuple("DebuggerStmt").finish(),
            Self::Decl(_) => f.debug_tuple("Decl").finish(),
            Self::DoWhileStmt(_) => f.debug_tuple("DoWhileStmt").finish(),
            Self::EmptyStmt(_) => f.debug_tuple("EmptyStmt").finish(),
            Self::ExportAll(_) => f.debug_tuple("ExportAll").finish(),
            Self::ExportDecl(_) => f.debug_tuple("ExportDecl").finish(),
            Self::ExportDefaultDecl(_) => f.debug_tuple("ExportDefaultDecl").finish(),
            Self::ExportDefaultExpr(_) => f.debug_tuple("ExportDefaultExpr").finish(),
            Self::ExportSpecifier(_) => f.debug_tuple("ExportSpecifier").finish(),
            Self::Expr(_) => f.debug_tuple("Expr").finish(),
            Self::ExprOrSpread(_) => f.debug_tuple("ExprOrSpread").finish(),
            Self::ExprStmt(_) => f.debug_tuple("ExprStmt").finish(),
            Self::FnDecl(_) => f.debug_tuple("FnDecl").finish(),
            Self::ForInStmt(_) => f.debug_tuple("ForInStmt").finish(),
            Self::ForOfStmt(_) => f.debug_tuple("ForOfStmt").finish(),
            Self::ForStmt(_) => f.debug_tuple("ForStmt").finish(),
            Self::Ident(_) => f.debug_tuple("Ident").finish(),
            Self::IfStmt(_) => f.debug_tuple("IfStmt").finish(),
            Self::ImportDecl(_) => f.debug_tuple("ImportDecl").finish(),
            Self::ImportDefaultSpecifier(_) => f.debug_tuple("ImportDefaultSpecifier").finish(),
            Self::ImportNamedSpecifier(_) => f.debug_tuple("ImportNamedSpecifier").finish(),
            Self::ImportSpecifier(_) => f.debug_tuple("ImportSpecifier").finish(),
            Self::LabeledStmt(_) => f.debug_tuple("LabeledStmt").finish(),
            Self::Module(_) => f.debug_tuple("Module").finish(),
            Self::ModuleItem(_) => f.debug_tuple("ModuleItem").finish(),
            Self::NamedExport(_) => f.debug_tuple("NamedExport").finish(),
            Self::ObjectLit(_) => f.debug_tuple("ObjectLit").finish(),
            Self::Pat(_) => f.debug_tuple("Pat").finish(),
            Self::ReturnStmt(_) => f.debug_tuple("ReturnStmt").finish(),
            Self::Source(_) => f.debug_tuple("Source").finish(),
            Self::SwitchStmt(_) => f.debug_tuple("SwitchStmt").finish(),
            Self::ThrowStmt(_) => f.debug_tuple("ThrowStmt").finish(),
            Self::TryStmt(_) => f.debug_tuple("TryStmt").finish(),
            Self::TsArrayType(_) => f.debug_tuple("TsArrayType").finish(),
            Self::TsConditionalType(_) => f.debug_tuple("TsConditionalType").finish(),
            Self::TsEnumDecl(_) => f.debug_tuple("TsEnumDecl").finish(),
            Self::TsExportAssignment(_) => f.debug_tuple("TsExportAssignment").finish(),
            Self::TsFnOrConstructorType(_) => f.debug_tuple("TsFnOrConstructorType").finish(),
            Self::TsImportEquals(_) => f.debug_tuple("TsImportEquals").finish(),
            Self::TsImportType(_) => f.debug_tuple("TsImportType").finish(),
            Self::TsIndexedAccessType(_) => f.debug_tuple("TsIndexedAccessType").finish(),
            Self::TsInferType(_) => f.debug_tuple("TsInferType").finish(),
            Self::TsInterfaceBody(_) => f.debug_tuple("TsInterfaceBody").finish(),
            Self::TsInterfaceDecl(_) => f.debug_tuple("TsInterfaceDecl").finish(),
            Self::TsKeywordType(_) => f.debug_tuple("TsKeywordType").finish(),
            Self::TsLitType(_) => f.debug_tuple("TsLitType").finish(),
            Self::TsMappedType(_) => f.debug_tuple("TsMappedType").finish(),
            Self::TsModuleDecl(_) => f.debug_tuple("TsModuleDecl").finish(),
            Self::TsNamespaceExport(_) => f.debug_tuple("TsNamespaceExport").finish(),
            Self::TsOptionalType(_) => f.debug_tuple("TsOptionalType").finish(),
            Self::TsParenthesizedType(_) => f.debug_tuple("TsParenthesizedType").finish(),
            Self::TsPropertySignature(_) => f.debug_tuple("TsPropertySignature").finish(),
            Self::TsRestType(_) => f.debug_tuple("TsRestType").finish(),
            Self::TsThisType(_) => f.debug_tuple("TsThisType").finish(),
            Self::TsTupleType(_) => f.debug_tuple("TsTupleType").finish(),
            Self::TsType(_) => f.debug_tuple("TsType").finish(),
            Self::TsTypeAliasDecl(_) => f.debug_tuple("TsTypeAliasDecl").finish(),
            Self::TsTypeAnnotation(_) => f.debug_tuple("TsTypeAnnotation").finish(),
            Self::TsTypeElement(_) => f.debug_tuple("TsTypeElement").finish(),
            Self::TsTypeLit(_) => f.debug_tuple("TsTypeLit").finish(),
            Self::TsTypeOperator(_) => f.debug_tuple("TsTypeOperator").finish(),
            Self::TsTypeParamInstantiation(_) => f.debug_tuple("TsTypeParamInstantiation").finish(),
            Self::TsTypePredicate(_) => f.debug_tuple("TsTypePredicate").finish(),
            Self::TsTypeQuery(_) => f.debug_tuple("TsTypeQuery").finish(),
            Self::TsTypeRef(_) => f.debug_tuple("TsTypeRef").finish(),
            Self::TsUnionOrIntersectionType(_) => f.debug_tuple("TsUnionOrIntersectionType").finish(),
            Self::VarDecl(_) => f.debug_tuple("VarDecl").finish(),
            Self::VarDeclarator(_) => f.debug_tuple("VarDeclarator").finish(),
            Self::WhileStmt(_) => f.debug_tuple("WhileStmt").finish(),
            Self::WithStmt(_) => f.debug_tuple("WithStmt").finish(),
        }
    }
}