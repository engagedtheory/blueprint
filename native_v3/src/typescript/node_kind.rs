use std::fmt::Debug;
use swc_ecma_ast::*;

#[derive(PartialEq)]
pub enum NodeKind<'m> {
    TsExprWithTypeArgs(&'m TsExprWithTypeArgs),
    BindingIdent(&'m BindingIdent),
    Constructor(&'m Constructor),
    TsTypeParam(&'m TsTypeParam),
    TsEntityName(&'m TsEntityName),
    TsTypeParamDecl(&'m TsTypeParamDecl),
    MemberProp(&'m MemberProp),
    TsModuleBlock(&'m TsModuleBlock),
    TsNamespaceDecl(&'m TsNamespaceDecl),
    TsEnumMember(&'m TsEnumMember),
    TsFnParam(&'m TsFnParam),
    ArrayPat(&'m ArrayPat),
    RestPat(&'m RestPat),
    ObjectPat(&'m ObjectPat),
    AssignPat(&'m AssignPat),
    ThisExpr(&'m ThisExpr),
    ArrayLit(&'m ArrayLit),
    FnExpr(&'m FnExpr),
    UnaryExpr(&'m UnaryExpr),
    UpdateExpr(&'m UpdateExpr),
    BinExpr(&'m BinExpr),
    AssignExpr(&'m AssignExpr),
    MemberExpr(&'m MemberExpr),
    SuperPropExpr(&'m SuperPropExpr),
    CondExpr(&'m CondExpr),
    NewExpr(&'m NewExpr),
    SeqExpr(&'m SeqExpr),
    Lit(&'m Lit),
    TemplateLiteral(&'m Tpl),
    TaggedTpl(&'m TaggedTpl),
    YieldExpr(&'m YieldExpr),
    MetaPropExpr(&'m MetaPropExpr),
    AwaitExpr(&'m AwaitExpr),
    ParenExpr(&'m ParenExpr),
    TsTypeAssertionExpr(&'m TsTypeAssertion),
    TsConstAssertionExpr(&'m TsConstAssertion),
    TsNonNullExpr(&'m TsNonNullExpr),
    TsAsExpr(&'m TsAsExpr),
    TsInstantiationExpr(&'m TsInstantiation),
    TsSatisfiesExpr(&'m TsSatisfiesExpr),
    PrivateNameExpr(&'m PrivateName),
    OptChainExpr(&'m OptChainExpr),
    InvalidExpr(&'m Invalid),
    ArrowExpr(&'m ArrowExpr),
    BlockStmt(&'m BlockStmt),
    BlockStmtOrExpr(&'m BlockStmtOrExpr),
    BreakStmt(&'m BreakStmt),
    Callee(&'m Callee),
    CallExpr(&'m CallExpr),
    Class(&'m Class),
    ClassDecl(&'m ClassDecl),
    ClassExpr(&'m ClassExpr),
    ClassMember(&'m ClassMember),
    ClassProp(&'m ClassProp),
    ContinueStmt(&'m ContinueStmt),
    DebuggerStmt(&'m DebuggerStmt),
    Decl(&'m Decl),
    DoWhileStmt(&'m DoWhileStmt),
    EmptyStmt(&'m EmptyStmt),
    ExportAll(&'m ExportAll),
    ExportDecl(&'m ExportDecl),
    ExportDefaultDecl(&'m ExportDefaultDecl),
    ExportDefaultExpr(&'m ExportDefaultExpr),
    ExportSpecifier(&'m ExportSpecifier),
    Expr(&'m Expr),
    ExprOrSpread(&'m ExprOrSpread),
    ExprStmt(&'m ExprStmt),
    FnDecl(&'m FnDecl),
    ForInStmt(&'m ForInStmt),
    ForOfStmt(&'m ForOfStmt),
    ForStmt(&'m ForStmt),
    Ident(&'m Ident),
    IfStmt(&'m IfStmt),
    ImportDecl(&'m ImportDecl),
    ImportDefaultSpecifier(&'m ImportDefaultSpecifier),
    ImportNamedSpecifier(&'m ImportNamedSpecifier),
    ImportSpecifier(&'m ImportSpecifier),
    LabeledStmt(&'m LabeledStmt),
    Module(Module),
    ModuleItem(&'m ModuleItem),
    NamedExport(&'m NamedExport),
    ObjectLit(&'m ObjectLit),
    Pat(&'m Pat),
    ReturnStmt(&'m ReturnStmt),
    Source(&'m Module),
    SwitchStmt(&'m SwitchStmt),
    ThrowStmt(&'m ThrowStmt),
    TryStmt(&'m TryStmt),
    TsArrayType(&'m TsArrayType),
    TsConditionalType(&'m TsConditionalType),
    TsEnumDecl(&'m TsEnumDecl),
    TsExportAssignment(&'m TsExportAssignment),
    TsFnOrConstructorType(&'m TsFnOrConstructorType),
    TsImportEquals(&'m TsImportEqualsDecl),
    TsImportType(&'m TsImportType),
    TsIndexedAccessType(&'m TsIndexedAccessType),
    TsInferType(&'m TsInferType),
    TsInterfaceBody(&'m TsInterfaceBody),
    TsInterfaceDecl(&'m TsInterfaceDecl),
    TsKeywordType(&'m TsKeywordType),
    TsLitType(&'m TsLitType),
    TsMappedType(&'m TsMappedType),
    TsModuleDecl(&'m TsModuleDecl),
    TsNamespaceExport(&'m TsNamespaceExportDecl),
    TsOptionalType(&'m TsOptionalType),
    TsParenthesizedType(&'m TsParenthesizedType),
    TsPropertySignature(&'m TsPropertySignature),
    TsRestType(&'m TsRestType),
    TsThisType(&'m TsThisType),
    TsTupleType(&'m TsTupleType),
    TsType(&'m TsType),
    TsTypeAliasDecl(&'m TsTypeAliasDecl),
    TsTypeAnnotation(&'m TsTypeAnn),
    TsTypeElement(&'m TsTypeElement),
    TsTypeLit(&'m TsTypeLit),
    TsTypeOperator(&'m TsTypeOperator),
    TsTypeParamInstantiation(&'m TsTypeParamInstantiation),
    TsTypePredicate(&'m TsTypePredicate),
    TsTypeQuery(&'m TsTypeQuery),
    TsTypeRef(&'m TsTypeRef),
    TsUnionOrIntersectionType(&'m TsUnionOrIntersectionType),
    VarDecl(&'m VarDecl),
    VarDeclarator(&'m VarDeclarator),
    WhileStmt(&'m WhileStmt),
    WithStmt(&'m WithStmt),
    TsQualifiedName(&'m TsQualifiedName),
    Str(&'m Str),
    Bool(&'m Bool),
    Null(&'m Null),
    Num(&'m Number),
    BigInt(&'m BigInt),
    Regex(&'m Regex),
    DefaultDecl(&'m DefaultDecl),
    TsUnionType(&'m TsUnionType),
    TsIntersectionType(&'m TsIntersectionType),
    TsTplLit(&'m TsTplLitType),
}

impl<'m> Debug for NodeKind<'m> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NodeKind::ArrowExpr(_) => f.write_str("ArrowExpr"),
            NodeKind::BlockStmt(_) => f.write_str("BlockStmt"),
            NodeKind::BlockStmtOrExpr(_) => f.write_str("BlockStmtOrExpr"),
            NodeKind::BreakStmt(_) => f.write_str("BreakStmt"),
            NodeKind::Callee(_) => f.write_str("Callee"),
            NodeKind::CallExpr(_) => f.write_str("CallExpr"),
            NodeKind::Class(_) => f.write_str("Class"),
            NodeKind::ClassDecl(_) => f.write_str("ClassDecl"),
            NodeKind::ClassExpr(_) => f.write_str("ClassExpr"),
            NodeKind::ClassMember(_) => f.write_str("ClassMember"),
            NodeKind::ClassProp(_) => f.write_str("ClassProp"),
            NodeKind::ContinueStmt(_) => f.write_str("ContinueStmt"),
            NodeKind::DebuggerStmt(_) => f.write_str("DebuggerStmt"),
            NodeKind::Decl(_) => f.write_str("Decl"),
            NodeKind::DoWhileStmt(_) => f.write_str("DoWhileStmt"),
            NodeKind::EmptyStmt(_) => f.write_str("EmptyStmt"),
            NodeKind::ExportAll(_) => f.write_str("ExportAll"),
            NodeKind::ExportDecl(_) => f.write_str("ExportDecl"),
            NodeKind::ExportDefaultDecl(_) => f.write_str("ExportDefaultDecl"),
            NodeKind::ExportDefaultExpr(_) => f.write_str("ExportDefaultExpr"),
            NodeKind::ExportSpecifier(_) => f.write_str("ExportSpecifier"),
            NodeKind::Expr(_) => f.write_str("Expr"),
            NodeKind::ExprOrSpread(_) => f.write_str("ExprOrSpread"),
            NodeKind::ExprStmt(_) => f.write_str("ExprStmt"),
            NodeKind::FnDecl(_) => f.write_str("FnDecl"),
            NodeKind::ForInStmt(_) => f.write_str("ForInStmt"),
            NodeKind::ForOfStmt(_) => f.write_str("ForOfStmt"),
            NodeKind::ForStmt(_) => f.write_str("ForStmt"),
            NodeKind::Ident(_) => f.write_str("Ident"),
            NodeKind::IfStmt(_) => f.write_str("IfStmt"),
            NodeKind::ImportDecl(_) => f.write_str("ImportDecl"),
            NodeKind::ImportDefaultSpecifier(_) => f.write_str("ImportDefaultSpecifier"),
            NodeKind::ImportNamedSpecifier(_) => f.write_str("ImportNamedSpecifier"),
            NodeKind::ImportSpecifier(_) => f.write_str("ImportSpecifier"),
            NodeKind::LabeledStmt(_) => f.write_str("LabeledStmt"),
            NodeKind::Module(_) => f.write_str("Module"),
            NodeKind::ModuleItem(_) => f.write_str("ModuleItem"),
            NodeKind::NamedExport(_) => f.write_str("NamedExport"),
            NodeKind::ObjectLit(_) => f.write_str("ObjectLit"),
            NodeKind::Pat(_) => f.write_str("Pat"),
            NodeKind::ReturnStmt(_) => f.write_str("ReturnStmt"),
            NodeKind::Source(_) => f.write_str("Source"),
            NodeKind::SwitchStmt(_) => f.write_str("SwitchStmt"),
            NodeKind::ThrowStmt(_) => f.write_str("ThrowStmt"),
            NodeKind::TryStmt(_) => f.write_str("TryStmt"),
            NodeKind::TsArrayType(_) => f.write_str("TsArrayType"),
            NodeKind::TsConditionalType(_) => f.write_str("TsConditionalType"),
            NodeKind::TsEnumDecl(_) => f.write_str("TsEnumDecl"),
            NodeKind::TsExportAssignment(_) => f.write_str("TsExportAssignment"),
            NodeKind::TsFnOrConstructorType(_) => f.write_str("TsFnOrConstructorType"),
            NodeKind::TsImportEquals(_) => f.write_str("TsImportEquals"),
            NodeKind::TsImportType(_) => f.write_str("TsImportType"),
            NodeKind::TsIndexedAccessType(_) => f.write_str("TsIndexedAccessType"),
            NodeKind::TsInferType(_) => f.write_str("TsInferType"),
            NodeKind::TsInterfaceBody(_) => f.write_str("TsInterfaceBody"),
            NodeKind::TsInterfaceDecl(_) => f.write_str("TsInterfaceDecl"),
            NodeKind::TsKeywordType(_) => f.write_str("TsKeywordType"),
            NodeKind::TsLitType(_) => f.write_str("TsLitType"),
            NodeKind::TsMappedType(_) => f.write_str("TsMappedType"),
            NodeKind::TsModuleDecl(_) => f.write_str("TsModuleDecl"),
            NodeKind::TsNamespaceExport(_) => f.write_str("TsNamespaceExport"),
            NodeKind::TsOptionalType(_) => f.write_str("TsOptionalType"),
            NodeKind::TsParenthesizedType(_) => f.write_str("TsParenthesizedType"),
            NodeKind::TsPropertySignature(_) => f.write_str("TsPropertySignature"),
            NodeKind::TsRestType(_) => f.write_str("TsRestType"),
            NodeKind::TsThisType(_) => f.write_str("TsThisType"),
            NodeKind::TsTupleType(_) => f.write_str("TsTupleType"),
            NodeKind::TsType(_) => f.write_str("TsType"),
            NodeKind::TsTypeAliasDecl(_) => f.write_str("TsTypeAliasDecl"),
            NodeKind::TsTypeAnnotation(_) => f.write_str("TsTypeAnnotation"),
            NodeKind::TsTypeElement(_) => f.write_str("TsTypeElement"),
            NodeKind::TsTypeLit(_) => f.write_str("TsTypeLit"),
            NodeKind::TsTypeOperator(_) => f.write_str("TsTypeOperator"),
            NodeKind::TsTypeParamInstantiation(_) => f.write_str("TsTypeParamInstantiation"),
            NodeKind::TsTypePredicate(_) => f.write_str("TsTypePredicate"),
            NodeKind::TsTypeQuery(_) => f.write_str("TsTypeQuery"),
            NodeKind::TsTypeRef(_) => f.write_str("TsTypeRef"),
            NodeKind::TsUnionOrIntersectionType(_) => f.write_str("TsUnionOrIntersectionType"),
            NodeKind::VarDecl(_) => f.write_str("VarDecl"),
            NodeKind::VarDeclarator(_) => f.write_str("VarDeclarator"),
            NodeKind::WhileStmt(_) => f.write_str("WhileStmt"),
            NodeKind::WithStmt(_) => f.write_str("WithStmt"),
            NodeKind::ThisExpr(_) => f.write_str("ThisExpr"),
            NodeKind::ArrayLit(_) => f.write_str("ArrayLit"),
            NodeKind::FnExpr(_) => f.write_str("FnExpr"),
            NodeKind::UnaryExpr(_) => f.write_str("UnaryExpr"),
            NodeKind::UpdateExpr(_) => f.write_str("UpdateExpr"),
            NodeKind::BinExpr(_) => f.write_str("BinExpr"),
            NodeKind::AssignExpr(_) => f.write_str("AssignExpr"),
            NodeKind::MemberExpr(_) => f.write_str("MemberExpr"),
            NodeKind::SuperPropExpr(_) => f.write_str("SuperPropExpr"),
            NodeKind::CondExpr(_) => f.write_str("CondExpr"),
            NodeKind::NewExpr(_) => f.write_str("NewExpr"),
            NodeKind::SeqExpr(_) => f.write_str("SeqExpr"),
            NodeKind::Lit(_) => f.write_str("Lit"),
            NodeKind::TemplateLiteral(_) => f.write_str("Tpl"),
            NodeKind::TaggedTpl(_) => f.write_str("TaggedTpl"),
            NodeKind::YieldExpr(_) => f.write_str("YieldExpr"),
            NodeKind::MetaPropExpr(_) => f.write_str("MetaPropExpr"),
            NodeKind::AwaitExpr(_) => f.write_str("AwaitExpr"),
            NodeKind::ParenExpr(_) => f.write_str("ParenExpr"),
            NodeKind::TsTypeAssertionExpr(_) => f.write_str("TsTypeAssertionExpr"),
            NodeKind::TsConstAssertionExpr(_) => f.write_str("TsConstAssertionExpr"),
            NodeKind::TsNonNullExpr(_) => f.write_str("TsNonNullExpr"),
            NodeKind::TsAsExpr(_) => f.write_str("TsAsExpr"),
            NodeKind::TsInstantiationExpr(_) => f.write_str("TsInstantiationExpr"),
            NodeKind::TsSatisfiesExpr(_) => f.write_str("TsSatisfiesExpr"),
            NodeKind::PrivateNameExpr(_) => f.write_str("PrivateNameExpr"),
            NodeKind::OptChainExpr(_) => f.write_str("OptChainExpr"),
            NodeKind::InvalidExpr(_) => f.write_str("InvalidExpr"),
            NodeKind::ArrayPat(_) => f.write_str("ArrayPat"),
            NodeKind::RestPat(_) => f.write_str("RestPat"),
            NodeKind::ObjectPat(_) => f.write_str("ObjectPat"),
            NodeKind::AssignPat(_) => f.write_str("AssignPat"),
            NodeKind::TsFnParam(_) => f.write_str("TsFnParam"),
            NodeKind::TsEnumMember(_) => f.write_str("TsEnumMember"),
            NodeKind::TsModuleBlock(_) => f.write_str("TsModuleBlock"),
            NodeKind::TsNamespaceDecl(_) => f.write_str("TsNamespaceDecl"),
            NodeKind::MemberProp(_) => f.write_str("MemberProp"),
            NodeKind::TsTypeParamDecl(_) => f.write_str("TsTypeParamDecl"),
            NodeKind::TsEntityName(_) => f.write_str("TsEntityName"),
            NodeKind::TsQualifiedName(_) => f.write_str("TsQualifiedName"),
            NodeKind::Str(_) => f.write_str("Str"),
            NodeKind::Bool(_) => f.write_str("Bool"),
            NodeKind::Null(_) => f.write_str("Null"),
            NodeKind::Num(_) => f.write_str("Num"),
            NodeKind::BigInt(_) => f.write_str("BigInt"),
            NodeKind::Regex(_) => f.write_str("Regex"),
            NodeKind::TsTypeParam(_) => f.write_str("TsTypeParam"),
            NodeKind::DefaultDecl(_) => f.write_str("DefaultDecl"),
            NodeKind::Constructor(_) => f.write_str("Constructor"),
            NodeKind::BindingIdent(_) => f.write_str("BindingIdent"),
            NodeKind::TsExprWithTypeArgs(_) => f.write_str("TsExprWithTypeArgs"),
            NodeKind::TsUnionType(_) => f.write_str("TsUnionType"),
            NodeKind::TsIntersectionType(_) => f.write_str("TsIntersectionType"),
            NodeKind::TsTplLit(_) => f.write_str("TsTplLit"),
        }
    }
}
